import java.awt.Color;
import java.awt.Graphics;
import java.awt.Canvas;
import java.awt.image.BufferStrategy;

public class Game extends Canvas implements Runnable{

	public static final int WIDTH = 640, HEIGHT = 480;

	private Thread thread;
	private boolean running = false;

	private Handler handler;
	private HUD hud;

	public Game(){
		handler = new Handler();

		this.addKeyListener(new KeyInput(handler));

		new Window(WIDTH, HEIGHT, "Game", this);

		StateManager.getInstance().setState(new S_Menu());

		// hud = new HUD();

		// handler.addObject(new Player(100, 100, ID.Player));
		// handler.addObject(new Player(400, 100, ID.Player2));
	}

	public synchronized void start(){
		thread = new Thread(this);
		thread.start();
		running = true;
	}

	public synchronized void stop(){
		try {
			thread.join();
			running = false;
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void run(){
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1){
				tick();
				delta--;
				frames++;
			}
			
			render();
			
			if(System.currentTimeMillis() - timer > 1000){
				timer += 1000;
				System.out.println("FPS: " + frames);
				frames = 0;
			}
		}
		stop();
	}

	public static double clamp(double n, double min, double max) {
		if (n <= min) {
			return min;
		}
		if (n >= max) {
			return max;
		}
		return n;
	}

	private void tick(){
		StateManager.getInstance().getState().tick();
		// handler.tick();
		// hud.tick();
	}

	private void render(){
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}

		Graphics g = bs.getDrawGraphics();

		g.setColor(Color.black);
		g.fillRect(0, 0, WIDTH, HEIGHT);

		StateManager.getInstance().getState().render(g);

		// handler.render(g);

		// hud.render(g);

		g.dispose();
		bs.show();
	}

	public static void main(String args[]) {
		new Game();
	}
}